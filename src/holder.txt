void Sick::construct_scan()
{
  scan_msg.header.frame_id = frame_id;
  scan_msg.range_min = 0.01;
  scan_msg.range_max = 20.0;
  scan_msg.scan_time = 100.0 / cfg.scaningFrequency;
  scan_msg.angle_increment = ((double)outputRange.angleResolution / 2) / 10000.0 * DEG2RAD;
  if(tf_correction) 
  {
    scan_msg.angle_min = ((((double)cfg.startAngle) / 10000.0) - 90.0) * DEG2RAD;
    scan_msg.angle_max = ((((double)cfg.stopAngle) / 10000.0) - 90.0) * DEG2RAD;
  } 
  else 
  {
    scan_msg.angle_min = ((double)cfg.startAngle ) / 10000.0 * DEG2RAD;
    scan_msg.angle_max = ((double)cfg.stopAngle ) / 10000.0 * DEG2RAD;
  }

  //int angle_range = outputRange.stopAngle - outputRange.startAngle;
  int num_values;

  if (cfg.angleResolution == 2500)
  {
    num_values = 1081;
  }
  else if (cfg.angleResolution == 5000)
  {
    num_values = 541;
  }
  else
  {
    RCLCPP_ERROR(this->get_logger(), "Unsupported resolution");
    return;
  }

  scan_msg.ranges.resize(num_values);
  scan_msg.intensities.resize(num_values);

  scan_msg.time_increment =
    (outputRange.angleResolution / 10000.0)
    / 360.0
    / (cfg.scaningFrequency / 100.0);
}

void Sick::get_measurements()
{
  dataCfg.outputChannel = 1;
  dataCfg.outputChannel = 1;
  dataCfg.remission = true;
  dataCfg.resolution = 1;
  dataCfg.encoder = 0;
  dataCfg.position = false;
  dataCfg.deviceName = false;
  dataCfg.outputInterval = 1;

  RCLCPP_INFO(this->get_logger(), "Setting scan data configuration.");
  laser.setScanDataCfg(dataCfg);

  RCLCPP_INFO(this->get_logger(),"Setting scan data configuration.");
  laser.startMeas();

  RCLCPP_INFO(this->get_logger(),"Waiting for ready status.");
  rclcpp::Time ready_status_timeout = this->get_clock()->now() + rclcpp::Duration::from_nanoseconds(5000);

  status_t stat = laser.queryStatus();
  rclcpp::Duration::from_nanoseconds(1000);
  if (stat != ready_for_measurement)
  {
    RCLCPP_ERROR(this->get_logger(),"Laser not ready. Retrying initialization.");
    laser.disconnect();
    return;
  }

  RCLCPP_INFO(this->get_logger(), "Starting device.");
  laser.startDevice(); // Log out to properly re-enable system after config

  RCLCPP_INFO(this->get_logger(),"Commanding continuous measurements.");
  laser.scanContinous(1);

  while (rclcpp::ok())
  {
    scan_msg.header.stamp = this->get_clock()->now();

    scanData data;
    RCLCPP_INFO(this->get_logger(),"Reading scan data.");
    if (laser.getScanData(&data))
    {
      for (int i = 0; i < data.dist_len1; i++)
      {
        scan_msg.ranges[i] = data.dist1[i] * 0.001;
      }

      for (int i = 0; i < data.rssi_len1; i++)
      {
        scan_msg.intensities[i] = data.rssi1[i];
      }

      RCLCPP_INFO(this->get_logger(),"Publishing scan data.");
      publish_scan();
    }
    else
    {
      RCLCPP_ERROR(this->get_logger(),"Laser timed out on delivering scan, attempting to reinitialize.");
      break;
    }
  }
  laser.scanContinous(0);
  laser.stopMeas();
  laser.disconnect();
}


void Sick::publish_scan()
{
  ls_publisher_->publish(scan_msg);
}
